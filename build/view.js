(()=>{const e=new class{constructor(){this.popups=[],this.isReady=!1,this.visitorType=this.getVisitorType(),this.deviceType=this.getDeviceType(),this.triggeredPopups=new Set,this.scrollDepths=new Map,this.timers=new Map,this.sessionShownPopups=new Set,this.debugMode=window.location.search.includes("poppit-debug=1"),this.testMode=window.location.search.includes("poppit-test=1"),this.init()}init(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.onReady()):this.onReady()}onReady(){this.debug("Poppit initialized"),this.isReady=!0,this.findPopups(),this.setupEventListeners(),setTimeout(()=>{this.processPopups()},100)}findPopups(){const e=document.querySelectorAll("[data-popup-id]");this.debug(`Found ${e.length} popup blocks`),e.forEach((t,s)=>{const o=this.extractPopupData(t);o&&this.shouldShowPopup(o)?(this.popups.push(o),this.debug(`Added popup ${o.id} to queue (${s+1}/${e.length})`)):this.debug(`Skipped popup ${o?.id||"unknown"} due to targeting rules or previous display`)}),this.debug(`Total popups in queue: ${this.popups.length}`)}extractPopupData(e){try{return{id:e.dataset.popupId,type:e.dataset.popupType||"modal",triggerType:e.dataset.triggerType||"time",triggerDelay:parseInt(e.dataset.triggerDelay)||3,scrollDepth:parseInt(e.dataset.scrollDepth)||50,exitIntent:"true"===e.dataset.exitIntent,targeting:JSON.parse(e.dataset.targeting||'{"devices":["desktop","tablet","mobile"],"userType":"all"}'),allowReset:"true"===e.dataset.allowReset,resetDelay:parseInt(e.dataset.resetDelay)||60,element:e,shown:!1,timestamp:Date.now()}}catch(e){return console.warn("Error parsing popup data:",e),null}}shouldShowPopup(e){return e.targeting.devices.includes(this.deviceType)?"all"!==e.targeting.userType&&e.targeting.userType!==this.visitorType?(this.debug(`Popup ${e.id} filtered out by visitor type targeting`),!1):this.testMode?(this.debug(`Test mode enabled - popup ${e.id} will be shown`),!0):this.sessionShownPopups.has(e.id)?(this.debug(`Popup ${e.id} already shown in current session`),!1):this.checkPopupResetStatus(e):(this.debug(`Popup ${e.id} filtered out by device targeting`),!1)}checkPopupResetStatus(e){const t=`poppit_${e.id}`,s=localStorage.getItem(t);if(!s)return this.debug(`Popup ${e.id} never shown before`),!0;try{const t=JSON.parse(s),o=new Date(t.lastShown),i=new Date;if(!e.allowReset)return this.debug(`Popup ${e.id} already shown and reset not allowed`),!1;const p=(i-o)/6e4,r=e.resetDelay;return p>=r?(this.debug(`Popup ${e.id} reset period expired (${Math.round(p)}/${r} minutes)`),!0):(this.debug(`Popup ${e.id} still in reset cooldown (${Math.round(p)}/${r} minutes)`),!1)}catch(e){return console.warn("Error parsing popup reset data:",e),!0}}processPopups(){this.debug("Processing popup triggers..."),this.popups.forEach(e=>{switch(this.debug(`Setting up trigger for popup ${e.id}: ${e.triggerType}`),this.clearPopupTriggers(e.id),e.triggerType){case"time":this.setupTimeBasedTrigger(e);break;case"scroll":this.setupScrollTrigger(e);break;case"exit":this.setupExitIntentTrigger(e);break;case"load":setTimeout(()=>this.showPopup(e),100)}})}clearPopupTriggers(e){this.timers.has(e)&&(clearTimeout(this.timers.get(e)),this.timers.delete(e),this.debug(`Cleared existing timer for popup ${e}`)),this.triggeredPopups.delete(e),this.scrollDepths.delete(e)}setupTimeBasedTrigger(e){const t=Math.max(1e3*e.triggerDelay,100);this.debug(`Setting timer for popup ${e.id}: ${t}ms`);const s=setTimeout(()=>{this.debug(`Timer fired for popup ${e.id}`),this.triggeredPopups.has(e.id)?this.debug(`Popup ${e.id} was already triggered`):this.showPopup(e),this.timers.delete(e.id)},t);this.timers.set(e.id,s),this.debug(`Timer set for popup ${e.id} with ID ${s}`)}setupScrollTrigger(e){this.scrollDepths.set(e.id,{popup:e,targetDepth:e.scrollDepth,triggered:!1}),this.debug(`Scroll trigger set for popup ${e.id} at ${e.scrollDepth}%`)}setupExitIntentTrigger(e){let t=!1;const s=o=>{t||this.triggeredPopups.has(e.id)||(o.clientY<=0||null===o.relatedTarget&&o.target===document.documentElement)&&(t=!0,this.debug(`Exit intent triggered for popup ${e.id}`),this.showPopup(e),document.removeEventListener("mouseleave",s),document.removeEventListener("mousemove",i))};let o=0;const i=p=>{t||this.triggeredPopups.has(e.id)||(p.clientY<100&&o>p.clientY+50&&(t=!0,this.debug(`Exit intent triggered via mouse movement for popup ${e.id}`),this.showPopup(e),document.removeEventListener("mouseleave",s),document.removeEventListener("mousemove",i)),o=p.clientY)};document.addEventListener("mouseleave",s),document.addEventListener("mousemove",i),this.debug(`Exit intent listener set for popup ${e.id}`)}setupEventListeners(){let e;window.addEventListener("scroll",()=>{clearTimeout(e),e=setTimeout(()=>{this.handleScroll()},100)}),document.addEventListener("click",e=>{(e.target.classList.contains("popup-close")||e.target.classList.contains("popup-overlay")&&e.target===e.currentTarget)&&this.closePopup(e.target.closest(".popup-overlay"))}),document.addEventListener("keydown",e=>{"Escape"===e.key&&this.closeAllPopups()}),document.addEventListener("submit",e=>{e.target.classList.contains("popup-email-form")&&(e.preventDefault(),this.handleEmailSubmission(e.target))})}handleScroll(){const e=window.scrollY/(document.body.scrollHeight-window.innerHeight)*100;this.scrollDepths.forEach((t,s)=>{!t.triggered&&!this.triggeredPopups.has(s)&&e>=t.targetDepth&&(t.triggered=!0,this.debug(`Scroll trigger activated for popup ${s} at ${Math.round(e)}%`),this.showPopup(t.popup),this.scrollDepths.delete(s))})}showPopup(e){if(e.shown||this.triggeredPopups.has(e.id))return void this.debug(`Popup ${e.id} already shown or triggered`);this.debug(`Showing popup ${e.id}`),this.triggeredPopups.add(e.id),this.sessionShownPopups.add(e.id),e.shown=!0,this.timers.has(e.id)&&(clearTimeout(this.timers.get(e.id)),this.timers.delete(e.id));const t=this.createPopupHTML(e);document.body.insertAdjacentHTML("beforeend",t);const s=document.getElementById(`popup-${e.id}`);if(s?(s.offsetHeight,requestAnimationFrame(()=>{s.classList.add("popup-active"),this.debug(`Popup ${e.id} animation started`)})):this.debug(`Error: Could not find overlay for popup ${e.id}`),this.trackEvent(e.id,"display"),!this.testMode){const t=`poppit_${e.id}`,s={lastShown:(new Date).toISOString(),showCount:this.getShowCount(e.id)+1};localStorage.setItem(t,JSON.stringify(s)),this.debug(`Popup ${e.id} stored with reset data`)}this.debug(`Popup ${e.id} marked as shown`)}getShowCount(e){const t=`poppit_${e}`,s=localStorage.getItem(t);if(s)try{return JSON.parse(s).showCount||0}catch(e){return 0}return 0}createPopupHTML(e){const t=e.element,s=t.querySelector(".popup-title")?.innerHTML||"",o=t.querySelector(".popup-text")?.innerHTML||"",i="true"===t.dataset.emailEnabled,p=t.dataset.emailPlaceholder||"Enter your email",r=t.dataset.buttonText||"Subscribe",a="false"!==t.dataset.showCloseButton,n=t.dataset.overlayOpacity||"0.8";return`\n\t\t\t<div class="popup-overlay animation-${t.dataset.animation||"fadeIn"}" id="popup-${e.id}" style="background: rgba(0, 0, 0, ${n})">\n\t\t\t\t<div class="popup-container popup-${e.type}">\n\t\t\t\t\t${a?'<button class="popup-close" aria-label="Close">Ã—</button>':""}\n\t\t\t\t\t<div class="popup-content">\n\t\t\t\t\t\t${s?`<h3 class="popup-title">${s}</h3>`:""}\n\t\t\t\t\t\t${o?`<div class="popup-text">${o}</div>`:""}\n\t\t\t\t\t\t${i?`\n\t\t\t\t\t\t\t<form class="popup-email-form" data-popup-id="${e.id}">\n\t\t\t\t\t\t\t\t<input type="email" class="popup-email-input" placeholder="${p}" required>\n\t\t\t\t\t\t\t\t<button type="submit" class="popup-submit-btn">${r}</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t`:""}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}closePopup(e){if(!e)return;e.classList.remove("popup-active"),setTimeout(()=>{e.parentNode&&e.remove()},300);const t=e.id.replace("popup-","");this.trackEvent(t,"close"),this.debug(`Popup ${t} closed`)}closeAllPopups(){const e=document.querySelectorAll(".popup-overlay.popup-active");e.forEach(e=>this.closePopup(e)),this.debug(`Closed ${e.length} active popups`)}handleEmailSubmission(e){const t=e.querySelector('input[type="email"]').value,s=e.dataset.popupId,o=e.querySelector(".popup-submit-btn");o.disabled=!0,o.textContent="Submitting...","undefined"!=typeof popupMakerAjax?fetch(popupMakerAjax.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"popup_maker_email",nonce:popupMakerAjax.nonce,email:t,popup_id:s,page_url:window.location.href})}).then(e=>e.json()).then(t=>{if(!t.success)throw new Error(t.data||"Submission failed");e.innerHTML='<div class="popup-success">Thank you for subscribing!</div>',this.trackEvent(s,"email_submit"),setTimeout(()=>{this.closePopup(document.getElementById(`popup-${s}`))},2e3)}).catch(t=>{console.error("Email submission error:",t),o.disabled=!1,o.textContent="Try Again";const s=document.createElement("div");s.className="popup-error",s.textContent="Something went wrong. Please try again.",e.appendChild(s)}):(console.log("Email submitted:",t),e.innerHTML='<div class="popup-success">Thank you for subscribing!</div>',setTimeout(()=>{this.closePopup(document.getElementById(`popup-${s}`))},2e3))}trackEvent(e,t){"undefined"!=typeof popupMakerAjax&&fetch(popupMakerAjax.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"popup_maker_track",nonce:popupMakerAjax.nonce,popup_id:e,event_type:t,page_url:window.location.href})}).catch(e=>{console.warn("Analytics tracking failed:",e)})}debug(e){this.debugMode&&console.log(`[Poppit Debug] ${e}`)}getVisitorType(){return localStorage.getItem("poppit_visited")?"returning":(localStorage.setItem("poppit_visited","true"),"new")}getDeviceType(){const e=window.innerWidth;return e<=768?"mobile":e<=1024?"tablet":"desktop"}resetPopupDisplay(e){if(e){const t=`poppit_${e}`;localStorage.removeItem(t),this.sessionShownPopups.delete(e),this.triggeredPopups.delete(e),this.clearPopupTriggers(e),this.debug(`Reset display status for popup ${e}`)}else{const e=[];for(let t=0;t<localStorage.length;t++){const s=localStorage.key(t);s.startsWith("poppit_")&&e.push(s)}e.forEach(e=>localStorage.removeItem(e)),this.sessionShownPopups.clear(),this.triggeredPopups.clear(),this.timers.forEach(e=>{clearTimeout(e)}),this.timers.clear(),this.scrollDepths.clear(),this.debug("Reset all popup display statuses")}}reprocessPopups(){this.debug("Reprocessing popups..."),this.popups=[],this.findPopups(),this.processPopups()}getPopupStatus(e){const t=`poppit_${e}`,s=localStorage.getItem(t),o={popupId:e,shownInSession:this.sessionShownPopups.has(e),triggered:this.triggeredPopups.has(e),hasActiveTimer:this.timers.has(e),storedData:null,canShow:!1};if(s)try{o.storedData=JSON.parse(s);const e=new Date(o.storedData.lastShown),t=(new Date-e)/6e4;o.minutesSinceLastShown=Math.round(t)}catch(e){o.storageError=e.message}const i=document.querySelector(`[data-popup-id="${e}"]`);if(i){const e=this.extractPopupData(i);e&&(o.canShow=this.shouldShowPopup(e),o.allowReset=e.allowReset,o.resetDelay=e.resetDelay)}return o}};(window.location.search.includes("poppit-debug=1")||window.location.search.includes("poppit-test=1"))&&(window.Poppit=e,console.log("Poppit debug mode enabled. Use window.Poppit to access the instance."),console.log("Available methods:"),console.log("- resetPopupDisplay(popupId) - Reset display status for specific popup or all popups"),console.log("- reprocessPopups() - Re-scan and setup all popup triggers"),console.log("- getPopupStatus(popupId) - Get detailed status information for a popup"),console.log("URL parameters:"),console.log("- ?poppit-debug=1 (debug mode with console logs)"),console.log("- ?poppit-test=1 (test mode - ignores localStorage restrictions)"))})();